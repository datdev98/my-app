{"version":3,"sources":["index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","i","squares","renderSquare","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"gMAIMA,G,uLAEE,OACI,4BAAQC,UAAU,SAASC,QAASC,KAAKC,MAAMF,SAC1CC,KAAKC,MAAMC,W,GAJPC,IAAMC,YAUrBC,E,qLACWC,GAAI,IAAD,OACZ,OACI,kBAACT,EAAD,CACIK,MAAOF,KAAKC,MAAMM,QAAQD,GAC1BP,QAAS,WAAQ,EAAKE,MAAMF,QAAQO,Q,+BAM5C,OACI,6BACI,yBAAKR,UAAU,aACVE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAEvB,yBAAKV,UAAU,aACVE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,IAEvB,yBAAKV,UAAU,aACVE,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,S,GA1BnBL,IAAMC,WAiCpBK,E,YACF,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KACDS,MAAQ,CACTC,QAAS,CAAC,CACNJ,QAASK,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,yEAWPT,GACR,IAAMK,EAAUX,KAAKU,MAAMC,QAAQK,MAAM,EAAGhB,KAAKU,MAAMI,WAAa,GAE9DP,EADUI,EAAQA,EAAQM,OAAS,GACjBV,QAAQS,QAC5BE,EAAgBX,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKN,KAAKU,MAAMK,QAAU,IAAM,IACxCf,KAAKmB,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CACrBb,QAASA,KAEbO,WAAYH,EAAQM,OACpBF,SAAUf,KAAKU,MAAMK,a,6BAItBM,GACHrB,KAAKmB,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAItB,IAgBFC,EAhBC,OACCX,EAAUX,KAAKU,MAAMC,QACrBY,EAAUZ,EAAQX,KAAKU,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQhB,SAEjCkB,EAAQd,EAAQe,IAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQ5B,QAAS,kBAAM,EAAK+B,OAAOH,KAAQC,MAYvD,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmBxB,KAAKU,MAAMK,QAAU,IAAM,KAIvD,yBAAKjB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACO,EAAD,CACIE,QAASgB,EAAQhB,QACjBR,QAAS,SAACO,GAAD,OAAO,EAAKyB,YAAYzB,OAGzC,yBAAKR,UAAU,aACX,6BAAMwB,GACN,4BAAKG,S,GArENtB,IAAMC,WAoFzB,SAASc,EAAgBX,GAWrB,IAVA,IAAMyB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF1B,EAAI,EAAGA,EAAI0B,EAAMf,OAAQX,IAAK,CAAC,IAAD,cACjB0B,EAAM1B,GADW,GAC5B2B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GAClE,OAAO5B,EAAQ0B,GAGvB,OAAO,KAvBXG,IAASC,OACL,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,U","file":"static/js/main.fae1a090.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Square extends React.Component {\n    render() {\n        return (\n            <button className=\"square\" onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => { this.props.onClick(i) }}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            stepNumber: 0,\n            xIsNext: true\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        })\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ? \n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"sourceRoot":""}